// Functions Test - Demonstrates nlang function features
// This file tests: function declarations, parameters, return types, recursion, function calls

def main() {
    println("=== Functions Test ===");
    println("");
    
    // Function calls with different parameter types
    println("--- Function Calls with Different Parameters ---");
    store result1 = no_params();
    println("no_params() = 42");
    
    store result2 = single_param(42);
    println("single_param(42) = 84");
    
    store result3 = multiple_params(10, 20, 30);
    println("multiple_params(10, 20, 30) = 60");
    
    store result4 = mixed_types(5, 3.14, true, "hello");
    println("mixed_types(5, 3.14, true, 'hello') = 8.14");
    println("");
    
    // Functions returning different types
    println("--- Functions Returning Different Types ---");
    store int_result = return_int();
    println("return_int() = 100");
    
    store float_result = return_float();
    println("return_float() = 3.14159");
    
    store bool_result = return_bool();
    println("return_bool() = true");
    
    store string_result = return_string();
    println("return_string() = 'Hello from function!'");
    println("");
    
    // Recursive function calls
    println("--- Recursive Function Calls ---");
    store factorial_result = factorial(5);
    println("factorial(5) = 120");
    
    store fibonacci_result = fibonacci(8);
    println("fibonacci(8) = 21");
    
    store gcd_result = gcd(48, 18);
    println("gcd(48, 18) = 6");
    println("");
    
    // Functions with complex logic
    println("--- Functions with Complex Logic ---");
    store prime_check = is_prime(17);
    println("is_prime(17) = true");
    
    store power_result = power(2, 8);
    println("power(2, 8) = 256");
    
    store array_sum = sum_range(1, 10);
    println("sum_range(1, 10) = 55");
    println("");
    
    // Void functions (no return value)
    println("--- Void Functions ---");
    demonstrate_void();
    process_data_void(100);
    
    println("");
    println("=== Functions Test Completed! ===");
}

// Function with no parameters
def no_params(): int {
    return 42;
}

// Function with single parameter
def single_param(x: int): int {
    return x * 2;
}

// Function with multiple parameters
def multiple_params(a: int, b: int, c: int): int {
    return a + b + c;
}

// Function with mixed parameter types
def mixed_types(num: int, decimal: float, flag: bool, text: string): float {
    if (flag) {
        return num + decimal;
    } else {
        return decimal - num;
    }
}

// Functions returning different types
def return_int(): int {
    return 123;
}

def return_float(): float {
    return 3.14159;
}

def return_bool(): bool {
    return true;
}

def return_string(): string {
    return "Hello from function";
}

// Recursive function - factorial
def factorial(n: int): int {
    if (n <= 1) {
        return 1;
    } else {
        return n * factorial(n - 1);
    }
}

// Recursive function - fibonacci
def fibonacci(n: int): int {
    if (n <= 1) {
        return n;
    } else {
        return fibonacci(n - 1) + fibonacci(n - 2);
    }
}

// Recursive function - greatest common divisor
def gcd(a: int, b: int): int {
    if (b == 0) {
        return a;
    } else {
        return gcd(b, a % b);
    }
}

// Function with complex logic - prime number check
def is_prime(n: int): bool {
    if (n <= 1) {
        return false;
    }
    if (n <= 3) {
        return true;
    }
    if (n % 2 == 0 || n % 3 == 0) {
        return false;
    }
    
    store i = 5;
    while (i * i <= n) {
        if (n % i == 0 || n % (i + 2) == 0) {
            return false;
        }
        i = i + 6;
    }
    return true;
}

// Function with iterative logic - power calculation
def power(base: int, exponent: int): int {
    if (exponent == 0) {
        return 1;
    }
    
    store result = 1;
    store i = 0;
    while (i < exponent) {
        result = result * base;
        i = i + 1;
    }
    return result;
}

// Function calculating sum of range
def sum_range(start: int, end: int): int {
    store sum = 0;
    store i = start;
    while (i <= end) {
        sum = sum + i;
        i = i + 1;
    }
    return sum;
}

// Void function - no return value
def demonstrate_void() {
    println("demonstrate_void(): Executing void function");
    store local_var = "This is a void function";
    store another_var = 42;
    println("demonstrate_void(): Local variables created");
}

// Void function with parameters
def process_data_void(value: int) {
    println("process_data_void(100): Processing data");
    if (value > 50) {
        store status = "high";
        println("process_data_void(): Status set to 'high'");
    } else {
        store status = "low";
        println("process_data_void(): Status set to 'low'");
    }
}

// Function demonstrating early returns
def classify_triangle(a: int, b: int, c: int): string {
    // Check if valid triangle
    if (a + b <= c || a + c <= b || b + c <= a) {
        return "invalid";
    }
    
    // Check triangle type
    if (a == b && b == c) {
        return "equilateral";
    }
    
    if (a == b || b == c || a == c) {
        return "isosceles";
    }
    
    return "scalene";
}

// Function with nested function calls
def complex_calculation(x: int, y: int): int {
    store temp1 = power(x, 2);
    store temp2 = power(y, 2);
    store temp3 = gcd(temp1, temp2);
    return factorial(temp3 % 5);
}

// Function demonstrating parameter shadowing
def parameter_shadowing(value: int): int {
    if (value > 10) {
        store value = value * 2;  // Local variable shadows parameter
        return value;
    } else {
        return value;  // Uses parameter
    }
}

// Function with multiple return paths
def multiple_returns(condition: int): string {
    if (condition == 1) {
        return "first";
    } else if (condition == 2) {
        return "second";
    } else if (condition == 3) {
        return "third";
    } else {
        return "default";
    }
}