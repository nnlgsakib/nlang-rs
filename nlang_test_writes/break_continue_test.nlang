// Break and Continue Test - Demonstrates flow control statements
// This file tests: break statement, continue statement, nested loops, early termination

def main() {
    println("=== Break and Continue Test ===");
    println("");
    
    // Test 1: Basic break statement
    println("--- Test 1: Basic Break Statement ---");
    store counter = 0;
    while (counter < 10) {
        if (counter == 5) {
            println("Breaking at counter = 5");
            break;
        }
        println("Counter: " + counter);
        counter = counter + 1;
    }
    println("Final counter after break: " + counter);
    println("");
    
    // Test 2: Basic continue statement
    println("--- Test 2: Basic Continue Statement ---");
    store i = 0;
    while (i < 10) {
        i = i + 1;
        if (i % 2 == 0) {
            continue;  // Skip even numbers
        }
        println("Odd number: " + i);
    }
    println("");
    
    // Test 3: Break in nested structure
    println("--- Test 3: Break in Nested Structure ---");
    store outer = 0;
    while (outer < 3) {
        println("Outer loop: " + outer);
        store inner = 0;
        while (inner < 5) {
            if (inner == 3) {
                println("  Breaking inner loop at " + inner);
                break;
            }
            println("  Inner: " + inner);
            inner = inner + 1;
        }
        outer = outer + 1;
    }
    println("");
    
    // Test 4: Continue in nested structure
    println("--- Test 4: Continue in Nested Structure ---");
    store x = 0;
    while (x < 3) {
        println("X = " + x);
        store y = 0;
        while (y < 5) {
            y = y + 1;
            if (y == 2 || y == 4) {
                continue;  // Skip y = 2 and y = 4
            }
            println("  Y = " + y);
        }
        x = x + 1;
    }
    println("");
    
    // Test 5: Multiple breaks and continues
    println("--- Test 5: Multiple Breaks and Continues ---");
    store num = 0;
    while (num < 20) {
        num = num + 1;
        
        if (num < 5) {
            continue;  // Skip numbers less than 5
        }
        
        if (num > 15) {
            println("Breaking at num = " + num);
            break;     // Stop at numbers greater than 15
        }
        
        if (num % 3 == 0) {
            continue;  // Skip multiples of 3
        }
        
        println("Processing: " + num);
    }
    println("");
    
    // Test 6: Break and continue with conditions
    println("--- Test 6: Break and Continue with Complex Conditions ---");
    store value = 0;
    while (value < 100) {
        value = value + 1;
        
        // Continue for multiples of 7
        if (value % 7 == 0) {
            println("Skipping multiple of 7: " + value);
            continue;
        }
        
        // Break if we find a number divisible by both 11 and 13
        if (value % 11 == 0 && value % 13 == 0) {
            println("Found number divisible by both 11 and 13: " + value);
            break;
        }
        
        // Only print numbers that are prime-like (not divisible by 2, 3, or 5)
        if (value % 2 != 0 && value % 3 != 0 && value % 5 != 0) {
            println("Prime-like number: " + value);
        }
    }
    
    println("");
    println("=== Break and Continue Test Completed! ===");
}