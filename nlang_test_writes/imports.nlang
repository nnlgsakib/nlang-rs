// Imports Test - Demonstrates nlang import system
// This file tests: import statements, module aliases, selective imports, namespace access

// Import entire modules with aliases
import math_utils as math;
import string_utils as strings;

// Selective imports from modules
from math_utils import add, multiply, PI;
from string_utils import concat, create_greeting, DEFAULT_GREETING;

def main() {
    println("=== NLang Import System Demonstration ===");
    println("");
    
    // Using imported functions with module aliases
    println("--- Testing Module-Qualified Function Calls ---");
    store math_result1 = math.add(10, 20);
    println("math.add(10, 20) = 30");
    
    store math_result2 = math.multiply(5, 6);
    println("math.multiply(5, 6) = 30");
    
    store math_result3 = math.power(2, 8);
    println("math.power(2, 8) = 256");
    
    store math_result4 = math.factorial(5);
    println("math.factorial(5) = 120");
    println("");
    
    // Using imported constants with module aliases
    println("--- Testing Module-Qualified Constants ---");
    store pi_value = math.PI;
    println("math.PI = 3.14159");
    
    store e_value = math.E;
    println("math.E = 2.71828");
    
    store golden = math.GOLDEN_RATIO;
    println("math.GOLDEN_RATIO = 1.618");
    println("");
    
    // Using string utilities with module aliases
    println("--- Testing String Utilities ---");
    store greeting1 = strings.create_greeting("Alice");
    println("strings.create_greeting('Alice') = 'Hello, Alice!'");
    
    store greeting2 = strings.create_farewell("Bob");
    println("strings.create_farewell('Bob') = 'Goodbye, Bob!'");
    
    store repeated = strings.repeat_string("Hi! ", 3);
    println("strings.repeat_string('Hi! ', 3) = 'Hi! Hi! Hi! '");
    println("");
    
    // Using string constants with module aliases
    println("--- Testing String Constants ---");
    store empty = strings.EMPTY_STRING;
    println("strings.EMPTY_STRING = ''");
    
    store space = strings.SPACE;
    println("strings.SPACE = ' '");
    
    store default_msg = strings.DEFAULT_GREETING;
    println("strings.DEFAULT_GREETING = 'Hello!'");
    println("");
    
    // Using selectively imported functions (no module prefix needed)
    println("--- Testing Direct Imported Functions ---");
    store direct_add = add(15, 25);
    println("add(15, 25) = 40 (direct import)");
    
    store direct_mult = multiply(7, 8);
    println("multiply(7, 8) = 56 (direct import)");
    
    store direct_concat = concat("Hello", " World");
    println("concat('Hello', ' World') = 'Hello World' (direct import)");
    
    store direct_greeting = create_greeting("Charlie");
    println("create_greeting('Charlie') = 'Hello, Charlie!' (direct import)");
    println("");
    
    // Using selectively imported constants
    println("--- Testing Direct Imported Constants ---");
    store direct_pi = PI;
    println("PI = 3.14159 (direct import)");
    
    store direct_default = DEFAULT_GREETING;
    println("DEFAULT_GREETING = 'Hello!' (direct import)");
    println("");
    
    // Mixed usage - combining module-qualified and direct imports
    println("--- Testing Mixed Usage ---");
    store complex_calc = math.subtract(direct_add, math_result1);
    println("math.subtract(40, 30) = 10 (mixed usage)");
    
    store complex_string = concat(greeting1, strings.SPACE);
    println("concat(greeting1, strings.SPACE) = combined string (mixed usage)");
    println("");
    
    // Testing boolean functions from modules
    println("--- Testing Boolean Functions ---");
    store is_even_result = math.is_even(42);
    println("math.is_even(42) = true");
    
    store is_odd_result = math.is_odd(17);
    println("math.is_odd(17) = true");
    
    store is_empty_result = strings.is_empty("");
    println("strings.is_empty('') = true");
    println("");
    
    // Testing min/max functions
    println("--- Testing Min/Max Functions ---");
    store max_value = math.maximum(100, 200);
    println("math.maximum(100, 200) = 200");
    
    store min_value = math.minimum(50, 75);
    println("math.minimum(50, 75) = 50");
    println("");
    
    // Function calls with imported function results
    println("--- Testing Complex Function Calls ---");
    store nested_result = process_imported_data(math_result1, greeting1);
    println("process_imported_data() returned processed string");
    
    store validation_result = validate_calculations();
    println("validate_calculations() = true");
    
    println("");
    println("=== All Import Tests Completed Successfully! ===");
}

// Function using imported utilities
def process_imported_data(number: int, text: string): string {
    store doubled = math.multiply(number, 2);
    store formatted = strings.concat(text, " - Result: ");
    return strings.concat(formatted, "processed");
}

// Function demonstrating complex usage of imports
def validate_calculations(): bool {
    // Test mathematical operations
    store sum = add(10, 20);  // Direct import
    store product = math.multiply(5, 6);  // Module-qualified
    
    if (sum == 30 && product == 30) {
        return true;
    }
    
    // Test string operations
    store combined = concat("Test", " String");  // Direct import
    store greeting = strings.create_greeting("Validator");  // Module-qualified
    
    if (strings.is_empty(combined)) {
        return false;
    }
    
    return true;
}

// Function testing constants from imports
def test_constants(): float {
    store circumference = 2.0 * PI * 5.0;  // Using directly imported PI
    store area_approx = math.PI * 25.0;     // Using module-qualified PI
    
    return circumference + area_approx;
}

// Function demonstrating error handling with imports
def safe_divide(a: int, b: int): float {
    if (b == 0) {
        return 0.0;
    }
    return math.divide(a, b);
}

// Function using multiple imported modules
def create_report(name: string, score: int): string {
    store greeting = strings.create_greeting(name);
    store is_passing = score >= 60;
    store status = "";
    
    if (is_passing) {
        status = " - PASSED";
    } else {
        status = " - FAILED";
    }
    
    store score_doubled = math.multiply(score, 2);
    store final_message = strings.concat(greeting, status);
    
    return final_message;
}